<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False" MadCap:lastBlockDepth="8" MadCap:lastHeight="3392" MadCap:lastWidth="1352">
    <head>
        <link href="../Resources/TableStyles/TableCloudian.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <p style="text-align: center;"><span style="font-size: 18pt; color: #dae691;"><span style="color: #b5cb2b;font-weight: bold;">Cloudian S3 Kubernetes Provisioner Quick Start</span></span>
        </p>
        <p>The Cloudian S3 Provisioner makes it easy for containerized applications orchestrated by Kubernetes to use Cloudian HyperStore as their S3-driven object storage target. With the S3 Provisioner, you can use familiar Kubernetes resources and tooling to make HyperStore object storage buckets securely available to application pods that have S3 client capabilities. Such applications can then read and write to those object storage buckets using standard S3 API calls, subject to any restrictions that you as the administrator establish when configuring the relevant Kubernetes resources.</p>
        <h2 id="h2_quick_start">Requirements</h2>
        <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/TableCloudian.css');" class="TableStyle-TableCloudian" cellspacing="0">
            <col class="TableStyle-TableCloudian-Column-Regular" style="width: 247px;" />
            <col class="TableStyle-TableCloudian-Column-Regular" />
            <thead>
                <tr class="TableStyle-TableCloudian-Head-Header1">
                    <th class="TableStyle-TableCloudian-HeadE-Regular-Header1">Requirement Type</th>
                    <th class="TableStyle-TableCloudian-HeadD-Regular-Header1">Requirement</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-TableCloudian-Body-LightRows">
                    <td class="TableStyle-TableCloudian-BodyE-Regular-LightRows" style="text-align: center;">HyperStore system</td>
                    <td class="TableStyle-TableCloudian-BodyD-Regular-LightRows">
                        <p>HyperStore 7.1.7 or new</p>
                        <p class="Note" MadCap:autonum="&lt;b&gt;Note &#160;&lt;/b&gt;">If you are using HyperStore 7.1.7, need to enable... (if will have pods access as an IAM&#160;user)</p>
                    </td>
                </tr>
                <tr class="TableStyle-TableCloudian-Body-DarkerRows">
                    <td class="TableStyle-TableCloudian-BodyE-Regular-DarkerRows" style="text-align: center;">Kubernetes environment</td>
                    <td class="TableStyle-TableCloudian-BodyD-Regular-DarkerRows">
                        <ul>
                            <li>Kubernetes XX</li>
                            <li>A&#160;Kubernetes-orchestrate application</li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-TableCloudian-Body-LightRows">
                    <td class="TableStyle-TableCloudian-BodyE-Regular-LightRows" style="text-align: center;">Information you will need regarding your HyperStore system</td>
                    <td class="TableStyle-TableCloudian-BodyD-Regular-LightRows">
                        <ul>
                            <li>S3 Service endpoint (available CMC...)</li>
                            <li>IAM&#160;Service endpoint ("&#160;&#160;&#160;")</li>
                            <li>Storage policy IDs (CMC...)</li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-TableCloudian-Body-DarkerRows">
                    <td class="TableStyle-TableCloudian-BodyB-Regular-DarkerRows" style="text-align: center;">&#160;</td>
                    <td class="TableStyle-TableCloudian-BodyA-Regular-DarkerRows">&#160;</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>DEPLOY.MD ORIGINAL DEPLOY.MD ORIGINAL DEPLOY.MD ORIGINAL</p>
        <p>This guide shows you how to deploy the Cloudian S3 Provisioner for Kubernetes to allow you to use Object Bucket Claim, so your deployments have easy access to HyperStore buckets.</p>
        <p>It assumes a good working knowledge of Kubernetes and that you have <em>kubectl</em> on your path with permissions to run it.</p>
        <h2 id="h2_quick_start">Create the Object Bucket and Object Bucket Claim Custom Resource Definitions</h2>
        <p>Firstly, we need to create the generic Object Bucket and Object Bucket provisioner resources.  This only needs to be done once.</p>
        <p>Simply run</p><pre>kubectl apply -f https://raw.githubusercontent.com/kube-object-storage/lib-bucket-provisioner/master/deploy/crds/objectbucket_v1alpha1_objectbucket_crd.yaml</pre><pre>kubectl apply -f https://raw.githubusercontent.com/kube-object-storage/lib-bucket-provisioner/master/deploy/crds/objectbucket_v1alpha1_objectbucketclaim_crd.yaml</pre>
        <h2 id="h2_quick_start">Deploy the S3 Provisioner</h2>
        <p>Next we need to deploy the Cloudian provisioner.  This only needs to be done once per Kubernetes cluster.</p>
        <p>Simply run</p><pre>kubectl apply -f https://raw.githubusercontent.com/cloudian/cloudian-s3-operator/hyperstore/examples/cloudian-s3-provisioner.yaml</pre>
        <p>This deploys a provisioner in the <em>s3-provisioner</em> namespace.</p>
        <h2 id="h2_quick_start">Create Owner Secret</h2>
        <p>We need to give the Kubernetes cluster the ability to connect to HyperStore.  You need credentials from a user who has sufficient rights to create/delete/get buckets and IAM users.  Again, only one of these is needed per Kubernetes cluster.</p>
        <p>Create <em>owner-secret.yaml</em>:</p><pre xml:space="preserve">apiVersion: v1
kind: Secret
metadata:
  name: s3-bucket-owner
  namespace: cloudian-s3-operator
type: Opaque
data:
  AWS_ACCESS_KEY_ID: base64_encoded_key
  AWS_SECRET_ACCESS_KEY: base64_encoded_secret</pre>
        <p>Ensure that your base64 encoded secret does not include the newline, using for example</p><pre>echo -n &lt;raw key&gt; | base64</pre>
        <p>to create it.</p>
        <p>Apply it with:</p><pre>kubectl apply -f owner-secret.yaml</pre>
        <p>As an alternative to using a YAML file for the owner secret, create these from the command line</p><pre>kubectl create secret -n s3-provisioner generic s3-bucket-owner --from-literal=AWS_ACCESS_KEY_ID=&lt;access key&gt; --from-literal=AWS_SECRET_ACCESS_KEY=&lt;secret key&gt;</pre>
        <h2 id="h2_quick_start">Create Storage Class</h2>
        <p>You may need multiple storage classes.  You can either create "greenfield" (each new deployment gets access to a newly created, empty bucket) or "brownfield" (each deployment gets access to a pre-created bucket) type classes.</p>
        <p>Create <em>storage-class.yaml</em>:</p><pre xml:space="preserve">kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: &lt;tag for this class, e.g. hyperstore-buckets&gt;
provisioner: cloudian-s3.io/bucket
parameters:
  region: &lt;region e.g. reg-1&gt;
  secretName: s3-bucket-owner
  secretNamespace: cloudian-s3-operator
  bucketName: &lt;existing bucket name, e.g. photos, or delete&gt; - brownfield only
  s3Endpoint: &lt;API server URL, e.g. http://s3-reg-1.landemo1.cloudian.eu&gt;
  iamEndpoint: &lt;IAM API server URL, e.g. http://iam.landemo1.cloudian.eu:16080&gt;
  storagePolicyId: &lt;Storage Policy ID - or omit line to use default storage policy&gt; - greenfield only
  createBucketUser: &lt;optional - control whether the provisioner creates IAM users. Either "yes" or "no", default is "yes"&gt;
  bucketClaimUserSecretName: &lt;optional - a separate secret holding credentials to provide to object bucket claim if user creation is disabled&gt;
  bucketClaimUserSecretNamespace: &lt;namespace for bucketClaimUserSecretName, required if bucketClaimUserSecretName is set&gt;
  iamPolicy: &lt;IAM policy document (JSON string) for users of this bucket - omit to use default IAM policy (read+write bucket). Only applies if IAM user creation enabled&gt;
reclaimPolicy: Delete</pre>
        <p>This file needs some customization, depending on your setup.</p>
        <ol>
            <li>Change <em>metadata.name</em> to a unique tag for this storage class.</li>
            <li>Change <em>region</em>, <em>s3Endpoint</em> and <em>iamEndpoint</em> to match your HyperStore setup</li>
            <li>For greenfield: delete <em>bucketName</em> and optionally set the storage policy to use for new buckets. Omit the <em>storagePolicyId</em> line to use the default policy. To find the policy ID, navigate to the <b>Cluster-&gt;Storage Policies</b> page on the CMC, select <b>View/Edit</b> for the policy, and copy the ID field (above the Policy Name field)</li>
            <li>For brownfield: specify an already created bucket name and delete <em>reclaimPolicy </em>and <em>storagePolicyId</em></li>
            <li>Optionally disable IAM user creation for bucket access by setting <em>createBucketUser</em> to <em>"no"</em>. A separate secret can be used to hold a shared credentials granted to all object bucket claims for this storage class by setting <em>bucketClaimUserSecretName</em> and <em>bucketClaimUserSecretNamespace</em>. If this secret is unset, the credentials from the <em>secretNamespace/secretName</em> are provided to object bucket claims.</li>
            <li>Optionally specify an IAM policy document to override default read+write access to the bucket. You do not need to specify <em>Resource</em> fields - they will be set to only allow access to the provisioned bucket. Only applicable if IAM user creation is enabled. For example, to grant read-only access to the bucket:</li>
        </ol>
        <div class="Indent"><pre xml:space="preserve">iamPolicy: |
  {
    "Version": "2012-10-17",
    "Statement": [{
      "Sid": "AllowAll",
      "Effect": "Allow",
      "Action": ["s3:HeadObject", "s3:ListBucket", "s3:GetObject"]
  }]
}</pre>
        </div>
        <p>Apply this with:</p><pre>kubectl apply -f storage-class.yaml</pre>
        <h2 id="h2_quick_start">Checking Your Setup</h2>
        <p>Create a <em>test.yaml</em> file that creates bucket claim and pod that binds environment variables to the config map and secret the provisioner generates:</p><pre xml:space="preserve">apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: test-setup-check
spec:
  generateBucketName: test-setup-check
  storageClassName: &lt;object storage class you want to check, e.g. hyperstore-buckets&gt;
---
apiVersion: v1
kind: Pod
metadata:
  name: test-setup-check
spec:
containers:
  - name: test-setup-check
  image: k8s.gcr.io/busybox
  command: [ "/bin/sh", "-c", "env" ]
  envFrom:
  - configMapRef:
    name: test-setup-check
  - secretRef:
    name: test-setup-check
  restartPolicy: Never</pre>
        <p>Deploy the <em>test.yaml</em>, wait until the test pod exists, then look at the logs and check the environment variables. Use the HyperStore CMC to verify the bucket has been created and an IAM user created that only has access rights to the bucket.</p><pre xml:space="preserve">kubectl apply -f test.yaml
kubectl get pods -w test-setup-check
# Wait until pod is status completed, then hit ctrl-c
kubectl logs test-setup-check | grep BUCKET_</pre>
        <p>You should see the following environment variables set</p><pre xml:space="preserve">BUCKET_HOST=s3-reg-1.landemo1.cloudian.eu
BUCKET_PORT=80
BUCKET_NAME=check-setup-ccf09b7c-ce06-431c-bc7d-9ddd5af8d192
BUCKET_SUBREGION=
BUCKET_REGION=reg-1</pre>
        <p>and the bucket and similarly looking IAM user created.  You'll also see the AWS credentials in the log too.  These details can be used to access HyperStore for that bucket only.</p>
        <p>Delete this deployment, and use the CMC to check the test bucket and IAM user have been deleted:</p><pre>kubectl delete -f test.yaml</pre>
        <p>If you look in CMC, you'll see the bucket and IAM user are gone.</p>
    </body>
</html>